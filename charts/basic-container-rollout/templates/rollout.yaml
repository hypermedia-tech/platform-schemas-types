---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Values.serviceName }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.serviceName }}
    version: {{ .Values.container.image.tag | quote }}
spec:
  {{- if not .Values.container.hpa.enabled }}
  replicas: {{ .Values.container.replicas }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 2 }}
  selector:
    matchLabels:
      app: {{ .Values.serviceName }}
  {{- if .Values.rollout.analysis }}
  analysis:
    {{- toYaml .Values.rollout.analysis | nindent 4 }}
  {{- end }}
  strategy:
    {{- toYaml (required "A rollout strategy (.Values.rollout.strategy) must be provided." .Values.rollout.strategy) | nindent 4 }}
  template:
    metadata:
      annotations:
        {{- if .Values.basicMonitoring.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "15020"
        prometheus.io/path: /stats/prometheus
        {{- end }}
      labels:
        app: {{ .Values.serviceName }}
        version: {{ .Values.container.image.tag | quote }}
        catalog: {{ .Values.serviceCatalog }}
    spec:
      {{- if .Values.serviceAccount }}
      serviceAccountName: {{ .Values.serviceAccount }}
      {{- end }}
      imagePullSecrets:
        - name: {{ .Values.serviceName }}-ghcr-docker-config
      containers:
          - name: {{ .Values.serviceName }}
            image: {{ .Values.container.image.repository }}:{{ .Values.container.image.digest }}
            imagePullPolicy: Always
            ports:
              {{- range .Values.container.containerPorts }}
              - name: {{ .portName }}
                containerPort: {{ .portNumber }}
              {{- end }}
        {{- if .Values.container.livenessProbe.enabled }}
            livenessProbe:
              {{- with .Values.container.livenessProbe}}
                {{- if eq .type "http"}}
                httpGet:
                  path: {{ .path }}
                  port: {{ .port }}
                  scheme: {{ .scheme }}
                {{- end }}
                initialDelaySeconds: {{ .initialDelaySeconds }}
                periodSeconds: {{ .periodSeconds }}
                successThreshold: {{ .successThreshold }}
                failureThreshold: {{ .failureThreshold }}
                {{- end }}
        {{- end }}
        {{- if .Values.container.readinessProbe.enabled }}
            readinessProbe:
              {{- with .Values.container.readinessProbe}}
                {{- if eq .type "http"}}
                httpGet:
                  path: {{ .path }}
                  port: {{ .port }}
                  scheme: {{ .scheme }}
                {{- end }}
                initialDelaySeconds: {{ .initialDelaySeconds }}
                periodSeconds: {{ .periodSeconds }}
                successThreshold: {{ .successThreshold }}
                failureThreshold: {{ .failureThreshold }}
                {{- end }}
        {{- end }}
            resources:
              {{- toYaml .Values.container.resources | nindent 12 }}
        {{- if or .Values.container.environment .Values.container.secrets }}
            env:
              {{- if .Values.container.environment }}
                {{- range .Values.container.environment }}
                - name: {{ .name }}
                  value: {{ .value | quote }}
                {{- end }}
                {{- end }}
                {{- if .Values.container.secrets }}
                {{- range .Values.container.secrets }}
                - name: {{ .name }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.serviceName }}-secrets
                      key: {{ .secretKey }}
                {{- end }}
                {{- end }}
        {{- end }}